/**
 * @fileoverview Helper Utilities
 *
 * 🎯 責任範囲:
 * - 列マッピング・インデックス操作
 * - データフォーマッティング
 * - 汎用ヘルパー関数
 * - 計算・変換ユーティリティ
 *
 * 🔄 GAS Best Practices準拠:
 * - フラット関数構造 (Object.freeze削除)
 * - 直接的な関数エクスポート
 * - 簡素なユーティリティ関数群
 */

/* global */

// ===========================================
// 📋 列操作ヘルパー関数群
// ===========================================

/**
 * 統一列インデックス取得
 * @param {Object} config - ユーザー設定
 * @param {string} columnType - 列タイプ (answer/reason/class/name)
 * @returns {number} 列インデックス（見つからない場合は-1）
 */
function getHelperColumnIndex(config, columnType) {
    const index = config?.columnMapping?.mapping?.[columnType];
    return typeof index === 'number' ? index : -1;
}




// ===========================================
// 📏 フォーマッティングヘルパー関数群
// ===========================================

// formatTimestamp - formatters.jsに統一 (重複削除完了)





// ===========================================
// 🔍 検証ヘルパー関数群
// ===========================================




// ===========================================
// 🧮 計算ヘルパー関数群
// ===========================================





// ===========================================
// 🔄 レガシー互換関数 (GAS Best Practices準拠)
// ===========================================




// formatTimestamp関数を削除 - formatters.gsで統一

