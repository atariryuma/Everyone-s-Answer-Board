/**
 * main.gs - Clean Application Entry Points
 * New Services Architecture Implementation
 *
 * üéØ Responsibilities:
 * - HTTP request routing (doGet/doPost)
 * - Service layer coordination
 * - Error handling & user feedback
 */

/* global UserService, ConfigService, DataService, SecurityService, ErrorHandler, DB, PROPS_KEYS, URL */

/**
 * GAS include function - HTML template inclusion utility
 * GAS„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„ÇπÊ∫ñÊã†„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Ç§„É≥„ÇØ„É´„Éº„ÉâÊ©üËÉΩ
 *
 * @param {string} filename - „Ç§„É≥„ÇØ„É´„Éº„Éâ„Åô„Çã„Éï„Ç°„Ç§„É´Âêç
 * @returns {string} „Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ
 */
function include(filename) {
  try {
    return HtmlService.createHtmlOutputFromFile(filename).getContent();
  } catch (error) {
    console.error(`include error for file ${filename}:`, error.message);
    return `<!-- Error loading ${filename}: ${error.message} -->`;
  }
}

/**
 * Application Configuration
 */
const APP_CONFIG = Object.freeze({
  APP_NAME: 'Everyone\'s Answer Board',
  VERSION: '2.1.0',
  
  MODES: Object.freeze({
    MAIN: 'main',
    ADMIN: 'admin', 
    LOGIN: 'login',
    SETUP: 'setup',
    DEBUG: 'debug'
  }),

  DEFAULTS: Object.freeze({
    CACHE_TTL: 300, // 5 minutes
    PAGE_SIZE: 50,
    MAX_RETRIES: 3
  })
});

/**
 * doGet - HTTP GET request handler with complete mode system restoration
 * Integrates historical mode switching with modern Services architecture
 */
function doGet(e) {
  try {
    // Parse request parameters
    const params = parseRequestParams(e);

    console.log('doGet: Processing request with params:', params);

    // Core system properties gating: if not ready, go to setup before auth
    try {
      if (!ConfigService.hasCoreSystemProps() && params.mode !== 'setup' && !params.setupParam) {
        console.log('doGet: Core system props missing, redirecting to setup');
        return renderSetupPageWithTemplate(params);
      }
    } catch (propCheckError) {
      console.warn('Core system props check error:', propCheckError.message);
      return renderSetupPageWithTemplate(params);
    }

    // Complete mode-based routing with historical functionality restored
    switch (params.mode) {
      case 'login':
        return handleLoginModeWithTemplate(params);

      case 'admin':
        return handleAdminModeWithTemplate(params);

      case 'view':
        return handleViewMode(params);

      case 'appSetup':
        return handleAppSetupMode(params);

      case 'debug':
        return handleDebugMode(params);

      case 'test':
        return handleTestMode(params);

      case 'fix_user':
        return handleFixUserMode(params);

      case 'clear_cache':
        return handleClearCacheMode(params);

      case 'setup':
        return handleSetupModeWithTemplate(params);

      default:
        // Handle setupParam=true for legacy compatibility
        if (params.setupParam === 'true' || params.setupParam === true) {
          return renderSetupPageWithTemplate(params);
        }

        // Default flow: authentication check for main app
        const userEmail = UserService.getCurrentEmail();
        if (!userEmail) {
          console.log('doGet: No authentication, redirecting to login');
          return handleLoginModeWithTemplate(params, { reason: 'authentication_required' });
        }

        // Access control verification
        const accessResult = SecurityService.checkUserPermission(null, 'authenticated_user');
        if (!accessResult.hasPermission) {
          return renderErrorPage({
            success: false,
            message: '„Ç¢„ÇØ„Çª„Çπ„ÅåÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü',
            details: accessResult.reason,
            canRetry: false
          });
        }

        // System initialization check for authenticated users
        let systemReady = false;
        try {
          systemReady = DataService.isSystemSetup() || ConfigService.isSystemSetup();
        } catch (setupCheckError) {
          console.warn('System setup check error:', setupCheckError.message);
          systemReady = false;
        }

        if (!systemReady) {
          console.log('doGet: System not ready, redirecting to admin for setup');
          return handleAdminModeWithTemplate(params, { reason: 'setup_required' });
        }

        // Main application view (equivalent to historical mode=view)
        return handleViewMode(params);
    }
  } catch (error) {
    // Unified error handling
    console.error('doGet error:', error.message, error.stack);
    const errorResponse = ErrorHandler.handle(error, 'doGet');
    return HtmlService.createHtmlOutput(`
      <h2>Application Error</h2>
      <p>${errorResponse.message}</p>
      <p>Error Code: ${errorResponse.errorCode}</p>
      <p><a href="${ScriptApp.getService().getUrl()}">Return to Home</a></p>
    `).setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * doPost - HTTP POST request handler
 */
function doPost(e) {
  try {
    // Security validation
    const userEmail = UserService.getCurrentEmail();
    
    // Parse and validate request
    const request = parsePostRequest(e);
    if (!request.action) {
      throw new Error('Action parameter is required');
    }

    if (!userEmail) {
      return ContentService.createTextOutput(JSON.stringify({
        success: false,
        message: 'Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô'
      })).setMimeType(ContentService.MimeType.JSON);
    }

    // Route to appropriate handler
    switch (request.action) {
      case 'getData':
        return handleGetData(request);
      
      case 'addReaction':
        return handleAddReaction(request);
      
      case 'toggleHighlight':
        return handleToggleHighlight(request);
      
      case 'refreshData':
        return handleRefreshData(request);
      
      default:
        throw new Error(`Unknown action: ${request.action}`);
    }
  } catch (error) {
    const errorResponse = ErrorHandler.handle(error, 'doPost');
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Request parameter parsing - enhanced for complete mode system
 */
function parseRequestParams(e) {
  const params = e.parameter || {};
  return {
    mode: params.mode || 'main',
    userId: params.userId,
    classFilter: params.classFilter,
    sortOrder: params.sortOrder || 'desc',
    adminMode: params.adminMode === 'true',
    // Historical compatibility parameters
    setupParam: params.setupParam,
    forced: params.forced,
    returnUrl: params.returnUrl,
    // Debug and test parameters
    debugMode: params.debugMode === 'true',
    testId: params.testId,
    // Additional utility parameters
    action: params.action,
    target: params.target
  };
}

/**
 * POST request parsing
 */
function parsePostRequest(e) {
  try {
    const postData = e.postData?.contents;
    if (!postData) {
      throw new Error('No POST data received');
    }
    
    return JSON.parse(postData);
  } catch (error) {
    throw new Error('Invalid JSON in POST data');
  }
}

/**
 * Main mode handler
 */
function handleMainMode(params) {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return handleLoginMode(params, { reason: 'user_info_required' });
    }

    // Get bulk data using new DataService
    const bulkResult = DataService.getBulkData(userInfo.userId, {
      includeSheetData: true,
      includeSystemInfo: true
    });

    if (!bulkResult.success) {
      throw new Error(bulkResult.error);
    }

    // Render main page
    return renderMainPage(bulkResult.data);
  } catch (error) {
    console.error('handleMainMode error:', error.message);
    throw error;
  }
}

/**
 * Data retrieval handler
 */
function handleGetData(request) {
  try {
    // Get current user
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      throw new Error('User information not found');
    }

    // Use new DataService instead of legacy getPublishedSheetData
    const options = {
      classFilter: request.classFilter,
      sortOrder: request.sortOrder,
      adminMode: request.adminMode
    };
    
    const result = DataService.getSheetData(userInfo.userId, options);
    
    return ContentService.createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('handleGetData error:', error.message);
    const errorResponse = ErrorHandler.handle(error, 'getData');
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Reaction handler
 */
function handleAddReaction(request) {
  try {
    const result = DataService.addReaction(
      (UserService.getCurrentUserInfo() || {}).userId,
      request.rowId,
      request.reactionType
    );

    return ContentService.createTextOutput(JSON.stringify({
      success: result,
      message: result ? 'Reaction added successfully' : 'Failed to add reaction'
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    const errorResponse = ErrorHandler.handle(error, 'addReaction');
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Highlight toggle handler
 */
function handleToggleHighlight(request) {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      throw new Error('User authentication required');
    }

    const result = DataService.toggleHighlight(userInfo.userId, request.rowId);

    return ContentService.createTextOutput(JSON.stringify({
      success: result,
      message: result ? 'Highlight toggled successfully' : 'Failed to toggle highlight'
    })).setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    const errorResponse = ErrorHandler.handle(error, 'toggleHighlight');
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Data refresh handler
 */
function handleRefreshData(request) {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      throw new Error('User authentication required');
    }

    // Clear cache and get fresh data
    const options = {
      classFilter: request.classFilter,
      sortOrder: request.sortOrder,
      adminMode: request.adminMode,
      useCache: false
    };
    
    const result = DataService.getSheetData(userInfo.userId, options);
    
    return ContentService.createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    const errorResponse = ErrorHandler.handle(error, 'refreshData');
    return ContentService.createTextOutput(JSON.stringify(errorResponse))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * Simple page renderers
 */
function renderMainPage(data) {
  const template = HtmlService.createTemplateFromFile('Page');
  template.data = data;
  return template.evaluate()
    .setTitle(APP_CONFIG.APP_NAME)
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function renderErrorPage(error) {
  return HtmlService.createHtmlOutput(`
    <h2>Error</h2>
    <p>${error.message}</p>
    ${error.details ? `<p>Details: ${error.details}</p>` : ''}
    <p><a href="${ScriptApp.getService().getUrl()}">Return to Home</a></p>
  `)
    .setTitle(`Error - ${  APP_CONFIG.APP_NAME}`)
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/**
 * Setup page renderer using proper HTML templates
 */
function renderSetupPageWithTemplate(params) {
  try {
    console.log('renderSetupPageWithTemplate: Rendering setup page');
    const template = HtmlService.createTemplateFromFile('SetupPage');
    template.params = params;
    return template.evaluate()
      .setTitle(`Setup - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (templateError) {
    console.warn('Setup template not found, using fallback:', templateError.message);
    return HtmlService.createHtmlOutput(`
      <h2>System Setup Required</h2>
      <p>The system needs to be configured before use.</p>
      <p><a href="?mode=setup">Start Setup</a></p>
      <p><a href="?setupParam=true">Legacy Setup</a></p>
    `)
      .setTitle(`Setup - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * Login mode handler using proper HTML templates
 */
function handleLoginModeWithTemplate(params, context = {}) {
  try {
    console.log('handleLoginModeWithTemplate: Rendering login page');
    const template = HtmlService.createTemplateFromFile('LoginPage');
    template.params = params;
    template.context = context;
    template.reason = context.reason || 'Authentication required';
    template.forced = params.forced === 'true';
    return template.evaluate()
      .setTitle(`Login - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (templateError) {
    console.warn('Login template not found, using fallback:', templateError.message);
    return HtmlService.createHtmlOutput(`
      <h2>Login Required</h2>
      <p>Please sign in to access ${APP_CONFIG.APP_NAME}.</p>
      <p>Reason: ${context.reason || 'Authentication required'}</p>
      <p><a href="${ScriptApp.getService().getUrl()}">Try Again</a></p>
    `)
      .setTitle(`Login - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * Admin mode handler using proper HTML templates
 */
function handleAdminModeWithTemplate(params, context = {}) {
  try {
    console.log('handleAdminModeWithTemplate: Rendering admin panel');

    // Security check for admin access
    const userEmail = UserService.getCurrentEmail();
    if (!userEmail) {
      return handleLoginModeWithTemplate(params, { reason: 'admin_access_requires_auth' });
    }

    const template = HtmlService.createTemplateFromFile('AdminPanel');
    template.params = params;
    template.context = context;
    template.userEmail = userEmail;
    template.isSystemAdmin = UserService.isSystemAdmin(userEmail);

    return template.evaluate()
      .setTitle(`Admin Panel - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (templateError) {
    console.warn('Admin template not found, using fallback:', templateError.message);
    return HtmlService.createHtmlOutput(`
      <h2>Admin Panel</h2>
      <p>Configuration and management interface</p>
      <p>User: ${UserService.getCurrentEmail() || 'Not authenticated'}</p>
      <p><a href="?mode=view">Return to Main App</a></p>
      <p><a href="?mode=setup">System Setup</a></p>
    `)
      .setTitle(`Admin - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * Setup mode handler using proper HTML templates
 */
function handleSetupModeWithTemplate(params) {
  try {
    console.log('handleSetupModeWithTemplate: Rendering setup interface');
    const template = HtmlService.createTemplateFromFile('SetupPage');
    template.params = params;
    template.mode = 'setup';
    return template.evaluate()
      .setTitle(`System Setup - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (templateError) {
    console.warn('Setup template not found, using fallback:', templateError.message);
    return HtmlService.createHtmlOutput(`
      <h2>System Setup</h2>
      <p>Initial system configuration interface</p>
      <p><a href="${ScriptApp.getService().getUrl()}">Return to Main</a></p>
    `)
      .setTitle(`Setup - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * Debug mode handler - system diagnostics and troubleshooting
 */
function handleDebugMode(params) {
  try {
    console.log('handleDebugMode: Running system diagnostics');
    const diagnostics = {
      timestamp: new Date().toISOString(),
      user: {
        email: UserService.getCurrentEmail(),
        userInfo: UserService.getCurrentUserInfo(),
        isSystemAdmin: UserService.isSystemAdmin()
      },
      services: {
        UserService: UserService.diagnose(),
        ConfigService: ConfigService.diagnose(),
        DataService: DataService.diagnose(),
        SecurityService: SecurityService.diagnose()
      },
      system: {
        hasCoreProps: ConfigService.hasCoreSystemProps(),
        isSystemSetup: ConfigService.isSystemSetup(),
        webAppUrl: getWebAppUrl(),
        scriptId: ScriptApp.getScriptId()
      },
      parameters: params
    };

    return HtmlService.createHtmlOutput(`
      <h2>System Diagnostics</h2>
      <div style="font-family: monospace; white-space: pre-wrap; background: #f5f5f5; padding: 10px; border: 1px solid #ddd;">${JSON.stringify(diagnostics, null, 2)}</div>
      <p><a href="${ScriptApp.getService().getUrl()}">Return to Main</a></p>
      <p><a href="?mode=admin">Admin Panel</a></p>
    `)
      .setTitle(`Debug - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    console.error('handleDebugMode error:', error.message);
    return renderErrorPage({ message: error.message });
  }
}

/**
 * View mode handler - the main application interface (historical mode=view)
 */
function handleViewMode(params) {
  try {
    console.log('handleViewMode: Rendering main application view');

    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return handleLoginModeWithTemplate(params, { reason: 'user_info_required' });
    }

    // Get bulk data using new DataService
    const bulkResult = DataService.getBulkData(userInfo.userId, {
      includeSheetData: true,
      includeSystemInfo: true,
      classFilter: params.classFilter,
      sortOrder: params.sortOrder,
      adminMode: params.adminMode
    });

    if (!bulkResult.success) {
      console.error('handleViewMode: Data retrieval failed:', bulkResult.error);
      return renderErrorPage({
        success: false,
        message: '„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
        details: bulkResult.error
      });
    }

    // Render main application page
    const template = HtmlService.createTemplateFromFile('Page');
    template.data = bulkResult.data;
    template.params = params;
    template.userInfo = userInfo;

    return template.evaluate()
      .setTitle(`${APP_CONFIG.APP_NAME} - Answer Board`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    console.error('handleViewMode error:', error.message);
    throw error;
  }
}

/**
 * App setup mode handler - application configuration interface
 */
function handleAppSetupMode(params) {
  try {
    console.log('handleAppSetupMode: Rendering app setup interface');

    // Require authentication for app setup
    const userEmail = UserService.getCurrentEmail();
    if (!userEmail) {
      return handleLoginModeWithTemplate(params, { reason: 'setup_requires_auth' });
    }

    const template = HtmlService.createTemplateFromFile('AppSetupPage');
    template.params = params;
    template.userEmail = userEmail;
    template.isSystemAdmin = UserService.isSystemAdmin(userEmail);

    return template.evaluate()
      .setTitle(`App Setup - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (templateError) {
    console.warn('AppSetupPage template not found, using fallback:', templateError.message);
    return HtmlService.createHtmlOutput(`
      <h2>App Setup</h2>
      <p>Application configuration interface</p>
      <p>User: ${UserService.getCurrentEmail() || 'Not authenticated'}</p>
      <p><a href="?mode=admin">Admin Panel</a></p>
      <p><a href="?mode=view">Return to Main App</a></p>
    `)
      .setTitle(`App Setup - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * Test mode handler - system testing and validation
 */
function handleTestMode(params) {
  try {
    console.log('handleTestMode: Running system tests');

    // Basic system tests
    const testResults = {
      timestamp: new Date().toISOString(),
      tests: [],
      passed: 0,
      failed: 0
    };

    // Test 1: User authentication
    try {
      const userEmail = UserService.getCurrentEmail();
      testResults.tests.push({
        name: 'User Authentication',
        status: userEmail ? 'PASS' : 'FAIL',
        result: userEmail || 'No user email found'
      });
      if (userEmail) testResults.passed++; else testResults.failed++;
    } catch (e) {
      testResults.tests.push({
        name: 'User Authentication',
        status: 'ERROR',
        result: e.message
      });
      testResults.failed++;
    }

    // Test 2: Services availability
    const services = ['UserService', 'ConfigService', 'DataService', 'SecurityService'];
    services.forEach(serviceName => {
      try {
        const serviceObj = eval(serviceName);
        const diagnose = serviceObj.diagnose();
        testResults.tests.push({
          name: serviceName,
          status: diagnose.status === 'healthy' ? 'PASS' : 'FAIL',
          result: diagnose.message || 'Available'
        });
        if (diagnose.status === 'healthy') testResults.passed++; else testResults.failed++;
      } catch (e) {
        testResults.tests.push({
          name: serviceName,
          status: 'ERROR',
          result: e.message
        });
        testResults.failed++;
      }
    });

    return HtmlService.createHtmlOutput(`
      <h2>System Test Results</h2>
      <p>Test ID: ${params.testId || 'manual'}</p>
      <p>Status: ${testResults.failed === 0 ? '‚úÖ All tests passed' : '‚ùå Some tests failed'}</p>
      <p>Results: ${testResults.passed} passed, ${testResults.failed} failed</p>
      <div style="font-family: monospace; white-space: pre-wrap; background: #f5f5f5; padding: 10px; border: 1px solid #ddd;">${JSON.stringify(testResults, null, 2)}</div>
      <p><a href="${ScriptApp.getService().getUrl()}">Return to Main</a></p>
      <p><a href="?mode=debug">Debug Mode</a></p>
    `)
      .setTitle(`Test Results - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    console.error('handleTestMode error:', error.message);
    return renderErrorPage({ message: error.message });
  }
}

/**
 * Fix user mode handler - user account repair utilities
 */
function handleFixUserMode(params) {
  try {
    console.log('handleFixUserMode: User account repair mode');

    const userEmail = UserService.getCurrentEmail();
    if (!userEmail) {
      return handleLoginModeWithTemplate(params, { reason: 'fix_user_requires_auth' });
    }

    const fixResults = {
      timestamp: new Date().toISOString(),
      userEmail: userEmail,
      fixes: [],
      successful: 0,
      failed: 0
    };

    // Fix 1: Ensure user exists in database
    try {
      let user = UserService.getCurrentUserInfo();
      if (!user) {
        const createResult = UserService.createUser(userEmail);
        if (createResult.success) {
          fixResults.fixes.push('‚úÖ Created missing user record');
          fixResults.successful++;
          user = UserService.getCurrentUserInfo();
        } else {
          fixResults.fixes.push('‚ùå Failed to create user record: ' + createResult.error);
          fixResults.failed++;
        }
      } else {
        fixResults.fixes.push('‚úÖ User record exists');
        fixResults.successful++;
      }
    } catch (e) {
      fixResults.fixes.push('‚ùå User fix error: ' + e.message);
      fixResults.failed++;
    }

    // Fix 2: Validate and repair config
    try {
      const userInfo = UserService.getCurrentUserInfo();
      if (userInfo) {
        const config = ConfigService.getUserConfig(userInfo.userId) || {};

        if (!config.version) {
          config.version = '1.0.0';
          fixResults.fixes.push('‚úÖ Added missing version to config');
        }

        if (!config.lastModified) {
          config.lastModified = new Date().toISOString();
          fixResults.fixes.push('‚úÖ Added missing lastModified to config');
        }

        const saveResult = ConfigService.saveUserConfig(userInfo.userId, config);
        if (saveResult.success) {
          fixResults.fixes.push('‚úÖ Config validation and repair completed');
          fixResults.successful++;
        } else {
          fixResults.fixes.push('‚ùå Config save failed: ' + saveResult.error);
          fixResults.failed++;
        }
      }
    } catch (e) {
      fixResults.fixes.push('‚ùå Config fix error: ' + e.message);
      fixResults.failed++;
    }

    return HtmlService.createHtmlOutput(`
      <h2>User Account Repair</h2>
      <p>User: ${userEmail}</p>
      <p>Status: ${fixResults.failed === 0 ? '‚úÖ All repairs successful' : '‚ö†Ô∏è Some repairs failed'}</p>
      <h3>Repair Results:</h3>
      <ul>${fixResults.fixes.map(fix => '<li>' + fix + '</li>').join('')}</ul>
      <div style="font-family: monospace; white-space: pre-wrap; background: #f5f5f5; padding: 10px; border: 1px solid #ddd; margin-top: 10px;">${JSON.stringify(fixResults, null, 2)}</div>
      <p><a href="${ScriptApp.getService().getUrl()}">Return to Main</a></p>
      <p><a href="?mode=admin">Admin Panel</a></p>
    `)
      .setTitle(`User Repair - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    console.error('handleFixUserMode error:', error.message);
    return renderErrorPage({ message: error.message });
  }
}

/**
 * Clear cache mode handler - cache management utilities
 */
function handleClearCacheMode(params) {
  try {
    console.log('handleClearCacheMode: Cache clearing utilities');

    const clearResults = {
      timestamp: new Date().toISOString(),
      operations: [],
      successful: 0,
      failed: 0
    };

    // Clear script cache
    try {
      const scriptCache = CacheService.getScriptCache();
      scriptCache.removeAll(['user_session', 'app_state', 'config_cache', 'data_cache']);
      clearResults.operations.push('‚úÖ Script cache cleared');
      clearResults.successful++;
    } catch (e) {
      clearResults.operations.push('‚ùå Script cache clear failed: ' + e.message);
      clearResults.failed++;
    }

    // Clear user cache if authenticated
    try {
      const userEmail = UserService.getCurrentEmail();
      if (userEmail) {
        const userCache = CacheService.getUserCache();
        userCache.removeAll(['user_data', 'sheet_data', 'permissions']);
        clearResults.operations.push('‚úÖ User cache cleared');
        clearResults.successful++;
      } else {
        clearResults.operations.push('‚ÑπÔ∏è No user authenticated, user cache not cleared');
      }
    } catch (e) {
      clearResults.operations.push('‚ùå User cache clear failed: ' + e.message);
      clearResults.failed++;
    }

    // Clear document cache (if available)
    try {
      if (typeof CacheService.getDocumentCache === 'function') {
        const docCache = CacheService.getDocumentCache();
        docCache.removeAll(['temp_data']);
        clearResults.operations.push('‚úÖ Document cache cleared');
        clearResults.successful++;
      } else {
        clearResults.operations.push('‚ÑπÔ∏è Document cache not available');
      }
    } catch (e) {
      clearResults.operations.push('‚ùå Document cache clear failed: ' + e.message);
      clearResults.failed++;
    }

    return HtmlService.createHtmlOutput(`
      <h2>Cache Management</h2>
      <p>Target: ${params.target || 'all'}</p>
      <p>Status: ${clearResults.failed === 0 ? '‚úÖ All operations successful' : '‚ö†Ô∏è Some operations failed'}</p>
      <h3>Operations:</h3>
      <ul>${clearResults.operations.map(op => '<li>' + op + '</li>').join('')}</ul>
      <div style="font-family: monospace; white-space: pre-wrap; background: #f5f5f5; padding: 10px; border: 1px solid #ddd; margin-top: 10px;">${JSON.stringify(clearResults, null, 2)}</div>
      <p><a href="${ScriptApp.getService().getUrl()}">Return to Main</a></p>
      <p><a href="?mode=debug">Debug Mode</a></p>
    `)
      .setTitle(`Cache Management - ${APP_CONFIG.APP_NAME}`)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    console.error('handleClearCacheMode error:', error.message);
    return renderErrorPage({ message: error.message });
  }
}

// ==============================================================================
// „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâAPIÈñ¢Êï∞ÔºàHTML„Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„ÇãÈáçË¶Å„Å™Èñ¢Êï∞Áæ§Ôºâ
// ==============================================================================

/**
 * ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
 * login.js.html, SetupPage.html, AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} [kind='email'] - ÂèñÂæó„Åô„ÇãÊÉÖÂ†±„ÅÆÁ®ÆÈ°ûÔºà'email' or 'full'Ôºâ
 * @returns {Object|null} Áµ±‰∏Ä„Åï„Çå„Åü„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
 */
function getUser(kind = 'email') {
  try {
    const userEmail = UserService.getCurrentEmail();
    
    if (!userEmail) {
      return null;
    }
    
    // ‚úÖ ‰øÆÊ≠£: Êàª„ÇäÂÄ§Âûã„ÇíÁµ±‰∏ÄÔºàÂ∏∏„Å´„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÔºâ
    const userInfo = UserService.getCurrentUserInfo();
    const result = {
      email: userEmail,
      userId: userInfo?.userId || null,
      isActive: userInfo?.isActive || false,
      hasConfig: !!userInfo?.config
    };
    
    // ÂæåÊñπ‰∫íÊèõÊÄß: email„ÅÆ„ÅøÂøÖË¶Å„Å™Â†¥Âêà„ÅØ email „Éï„Ç£„Éº„É´„Éâ„Å´ÊñáÂ≠óÂàó„ÅåÂÖ•„Å£„Å¶„ÅÑ„Çã
    if (kind === 'email') {
      // „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åß user.email „Åß„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ
      result.value = userEmail; // „É¨„Ç¨„Ç∑„ÉºÂØæÂøúÁî®
    }
    
    return result;
  } catch (error) {
    console.error('getUser „Ç®„É©„Éº:', error.message);
    return null;
  }
}

/**
 * Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆURL„ÇíÂèñÂæó
 * Ë§áÊï∞„ÅÆHTML„Éï„Ç°„Ç§„É´„Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„ÇãÂü∫Êú¨Ê©üËÉΩ
 * 
 * @returns {string} Web„Ç¢„Éó„É™„ÅÆURL
 */
function getWebAppUrl() {
  try {
    return ScriptApp.getService().getUrl();
  } catch (error) {
    console.error('getWebAppUrl „Ç®„É©„Éº:', error.message);
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ URL „ÇíËøî„Åô
    return 'https://script.google.com';
  }
}

/**
 * „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ„ÇíÂÆüË°å
 * login.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„ÇãÁµ±Âêà„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ
 * 
 * @returns {Object} „É≠„Ç∞„Ç§„É≥ÁµêÊûú
 */
function processLoginAction() {
  try {
    const userEmail = UserService.getCurrentEmail();
    
    if (!userEmail) {
      return {
        success: false,
        message: '„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô',
        requireAuth: true
      };
    }
    
    // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó„Åæ„Åü„ÅØ‰ΩúÊàê
    let userInfo = UserService.getCurrentUserInfo();
    
    if (!userInfo) {
      // Êñ∞Ë¶è„É¶„Éº„Ç∂„Éº„ÅÆÂ†¥Âêà„ÅØ‰ΩúÊàê
      const createResult = UserService.createUser(userEmail);
      if (!createResult.success) {
        return {
          success: false,
          message: createResult.error || '„É¶„Éº„Ç∂„Éº‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
        };
      }
      userInfo = UserService.getCurrentUserInfo();
    }
    
    // „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÁä∂ÊÖã„ÅÆÁ¢∫Ë™ç
    const config = ConfigService.getUserConfig(userInfo.userId);
    const needsSetup = !config?.spreadsheetId || config?.setupStatus !== 'completed';
    
    return {
      success: true,
      userId: userInfo.userId,
      email: userEmail,
      needsSetup,
      redirectUrl: needsSetup ? `${getWebAppUrl()}?mode=admin` : getWebAppUrl()
    };
  } catch (error) {
    console.error('processLoginAction „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * URLÂÜÖÈÉ®Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
 * login.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„ÇãÔºà‰∏ª„Å´„É≠„Ç∞Ë®òÈå≤Áî®Ôºâ
 * 
 * @returns {Object} „É™„Çª„ÉÉ„ÉàÁµêÊûú
 */
function forceUrlSystemReset() {
  try {
    console.log('URL „Ç∑„Çπ„ÉÜ„É†„É™„Çª„ÉÉ„Éà„ÅåË¶ÅÊ±Ç„Åï„Çå„Åæ„Åó„Åü');
    
    // „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„ÇØ„É™„Ç¢
    try {
      const cache = CacheService.getScriptCache();
      cache.removeAll(['user_session', 'app_state']);
    } catch (cacheError) {
      console.warn('„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„Ç®„É©„Éº:', cacheError.message);
    }
    
    return {
      success: true,
      message: '„Ç∑„Çπ„ÉÜ„É†„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Åæ„Åó„Åü',
      redirectUrl: getWebAppUrl()
    };
  } catch (error) {
    console.error('forceUrlSystemReset „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

// ==============================================================================
// „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÉªÁÆ°ÁêÜÈñ¢Êï∞ÔºàSetupPage.html, AppSetupPage.htmlÁî®Ôºâ
// ==============================================================================

/**
 * „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÂàùÊúü„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
 * SetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} serviceAccountJson - Service Account JSONÊñáÂ≠óÂàó
 * @param {string} databaseId - „Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID
 * @param {string} adminEmail - ÁÆ°ÁêÜËÄÖ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ
 * @param {string} [googleClientId] - Google Client ID („Ç™„Éó„Ç∑„Éß„É≥)
 * @returns {Object} „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÁµêÊûú
 */
function setupApplication(serviceAccountJson, databaseId, adminEmail, googleClientId) {
  try {
    // Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºàÂàùÂõû„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Åæ„Åü„ÅØÁÆ°ÁêÜËÄÖ„ÅÆ„ÅøÔºâ
    const currentEmail = UserService.getCurrentEmail();
    const props = PropertiesService.getScriptProperties();
    const existingAdmin = props.getProperty(PROPS_KEYS.ADMIN_EMAIL);
    
    if (existingAdmin && currentEmail !== existingAdmin) {
      return {
        success: false,
        message: 'ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    // Service AccountË≥áÊ†ºÊÉÖÂ†±„ÅÆÊ§úË®º„Å®‰øùÂ≠ò
    try {
      const saCredentials = JSON.parse(serviceAccountJson);
      if (!saCredentials.private_key || !saCredentials.client_email) {
        throw new Error('Service AccountË≥áÊ†ºÊÉÖÂ†±„Åå‰∏çÊ≠£„Åß„Åô');
      }
      props.setProperty(PROPS_KEYS.SERVICE_ACCOUNT_CREDS, serviceAccountJson);
    } catch (parseError) {
      return {
        success: false,
        message: `Service Account JSON „ÅÆÂΩ¢Âºè„Åå‰∏çÊ≠£„Åß„Åô: ${  parseError.message}`
      };
    }
    
    // „Éá„Éº„Çø„Éô„Éº„ÇπID„ÅÆÊ§úË®º„Å®‰øùÂ≠ò
    if (!databaseId || databaseId.length < 10) {
      return {
        success: false,
        message: '„Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„Åå‰∏çÊ≠£„Åß„Åô'
      };
    }
    props.setProperty(PROPS_KEYS.DATABASE_SPREADSHEET_ID, databaseId);
    
    // ÁÆ°ÁêÜËÄÖ„É°„Éº„É´„ÅÆÊ§úË®º„Å®‰øùÂ≠ò
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(adminEmail)) {
      return {
        success: false,
        message: 'ÁÆ°ÁêÜËÄÖ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂΩ¢Âºè„Åå‰∏çÊ≠£„Åß„Åô'
      };
    }
    props.setProperty(PROPS_KEYS.ADMIN_EMAIL, adminEmail);
    
    // Google Client ID„ÅÆ‰øùÂ≠òÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    if (googleClientId) {
      props.setProperty(PROPS_KEYS.GOOGLE_CLIENT_ID, googleClientId);
    }
    
    // „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Éï„É©„Ç∞„ÇíË®≠ÂÆö
    props.setProperty('SYSTEM_INITIALIZED', 'true');
    
    return {
      success: true,
      message: '„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü',
      redirectUrl: `${getWebAppUrl()  }?mode=login`
    };
  } catch (error) {
    console.error('setupApplication „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: `„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${  error.message}`
    };
  }
}

/**
 * „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„ÅÆ„ÉÜ„Çπ„ÉàÂÆüË°å
 * SetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} „ÉÜ„Çπ„ÉàÁµêÊûú
 */
function testSetup() {
  try {
    const results = {
      serviceAccount: false,
      database: false,
      adminEmail: false,
      webAppUrl: false
    };
    
    const props = PropertiesService.getScriptProperties();
    
    // Service Account Á¢∫Ë™ç
    try {
      const saCreds = props.getProperty(PROPS_KEYS.SERVICE_ACCOUNT_CREDS);
      results.serviceAccount = !!saCreds;
    } catch (e) {
      console.warn('Service Account „ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', e.message);
    }
    
    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÁ¢∫Ë™ç
    try {
      const dbId = props.getProperty(PROPS_KEYS.DATABASE_SPREADSHEET_ID);
      if (dbId) {
        const sheet = SpreadsheetApp.openById(dbId);
        results.database = !!sheet;
      }
    } catch (e) {
      console.warn('„Éá„Éº„Çø„Éô„Éº„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', e.message);
    }
    
    // ÁÆ°ÁêÜËÄÖ„É°„Éº„É´Á¢∫Ë™ç
    try {
      const adminEmail = props.getProperty(PROPS_KEYS.ADMIN_EMAIL);
      results.adminEmail = !!adminEmail;
    } catch (e) {
      console.warn('ÁÆ°ÁêÜËÄÖ„É°„Éº„É´„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', e.message);
    }
    
    // WebApp URL Á¢∫Ë™ç
    try {
      results.webAppUrl = !!getWebAppUrl();
    } catch (e) {
      console.warn('WebApp URL „ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', e.message);
    }
    
    const allPassed = Object.values(results).every(v => v === true);
    
    return {
      success: allPassed,
      results,
      message: allPassed ? '„Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„Å´ÂêàÊ†º„Åó„Åæ„Åó„Åü' : '‰∏ÄÈÉ®„ÅÆ„ÉÜ„Çπ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
    };
  } catch (error) {
    console.error('testSetup „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: `„ÉÜ„Çπ„Éà‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${  error.message}`
    };
  }
}

// ==============================================================================
// ÁÆ°ÁêÜ„Éë„Éç„É´Áî®APIÈñ¢Êï∞ÔºàAdminPanel.js.html, AppSetupPage.htmlÁî®Ôºâ
// ==============================================================================

/**
 * ÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
 * AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} Ë®≠ÂÆöÊÉÖÂ†±
 */
function getConfig() {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    const config = ConfigService.getUserConfig(userInfo.userId);
    return {
      success: true,
      config: config || {}
    };
  } catch (error) {
    console.error('getConfig „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 * AdminPanel.js.html, AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà‰∏ÄË¶ß
 */
function getSpreadsheetList() {
  try {
    const files = DriveApp.getFilesByType('application/vnd.google-apps.spreadsheet');
    const spreadsheets = [];
    let count = 0;
    const maxCount = 50; // ÊúÄÂ§ß50‰ª∂„Åæ„Åß
    
    while (files.hasNext() && count < maxCount) {
      const file = files.next();
      spreadsheets.push({
        id: file.getId(),
        name: file.getName(),
        url: file.getUrl(),
        lastUpdated: file.getLastUpdated()
      });
      count++;
    }
    
    return {
      success: true,
      spreadsheets
    };
  } catch (error) {
    console.error('getSpreadsheetList „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message,
      spreadsheets: []
    };
  }
}

/**
 * „Ç∑„Éº„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 * AdminPanel.js.html, AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} spreadsheetId - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID
 * @returns {Object} „Ç∑„Éº„Éà‰∏ÄË¶ß
 */
function getSheetList(spreadsheetId) {
  try {
    if (!spreadsheetId) {
      return {
        success: false,
        message: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
      };
    }
    
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheets = spreadsheet.getSheets();
    const sheetList = sheets.map(sheet => ({
      name: sheet.getName(),
      index: sheet.getIndex(),
      rowCount: sheet.getMaxRows(),
      columnCount: sheet.getMaxColumns()
    }));
    
    return {
      success: true,
      sheets: sheetList
    };
  } catch (error) {
    console.error('getSheetList „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message,
      sheets: []
    };
  }
}

/**
 * Âàó„ÇíÂàÜÊûê
 * AdminPanel.js.html, AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} spreadsheetId - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID
 * @param {string} sheetName - „Ç∑„Éº„ÉàÂêç
 * @returns {Object} ÂàóÂàÜÊûêÁµêÊûú
 */
function analyzeColumns(spreadsheetId, sheetName) {
  try {
    if (!spreadsheetId || !sheetName) {
      return {
        success: false,
        message: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„Å®„Ç∑„Éº„ÉàÂêç„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = spreadsheet.getSheetByName(sheetName);
    
    if (!sheet) {
      return {
        success: false,
        message: '„Ç∑„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // „Éò„ÉÉ„ÉÄ„ÉºË°å„ÇíÂèñÂæóÔºà1Ë°åÁõÆÔºâ
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // „Çµ„É≥„Éó„É´„Éá„Éº„Çø„ÇíÂèñÂæóÔºàÊúÄÂ§ß5Ë°åÔºâ
    const sampleRowCount = Math.min(5, sheet.getLastRow() - 1);
    let sampleData = [];
    if (sampleRowCount > 0) {
      sampleData = sheet.getRange(2, 1, sampleRowCount, sheet.getLastColumn()).getValues();
    }
    
    // ÂàóÊÉÖÂ†±„ÇíÂàÜÊûê
    const columns = headers.map((header, index) => {
      const samples = sampleData.map(row => row[index]).filter(v => v);
      
      // Âàó„Çø„Ç§„Éó„ÇíÊé®Ê∏¨
      let type = 'text';
      if (header.toLowerCase().includes('timestamp') || header.toLowerCase().includes('Êó•ÊôÇ')) {
        type = 'datetime';
      } else if (header.toLowerCase().includes('email') || header.toLowerCase().includes('„É°„Éº„É´')) {
        type = 'email';
      } else if (header.toLowerCase().includes('class') || header.toLowerCase().includes('„ÇØ„É©„Çπ')) {
        type = 'class';
      } else if (header.toLowerCase().includes('name') || header.toLowerCase().includes('ÂêçÂâç')) {
        type = 'name';
      } else if (samples.length > 0 && samples.every(s => !isNaN(s))) {
        type = 'number';
      }
      
      return {
        index,
        header,
        type,
        samples: samples.slice(0, 3) // ÊúÄÂ§ß3„Å§„ÅÆ„Çµ„É≥„Éó„É´
      };
    });
    
    return {
      success: true,
      columns,
      totalRows: sheet.getLastRow(),
      totalColumns: sheet.getLastColumn()
    };
  } catch (error) {
    console.error('analyzeColumns „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Éï„Ç©„Éº„É†ÊÉÖÂ†±„ÇíÂèñÂæó
 * AdminPanel.js.html, AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} spreadsheetId - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID
 * @param {string} sheetName - „Ç∑„Éº„ÉàÂêç
 * @returns {Object} „Éï„Ç©„Éº„É†ÊÉÖÂ†±
 */
function getFormInfo(_spreadsheetId, _sheetName) {
  // ÁèæÂú®„ÅØ„Éï„Ç©„Éº„É†ÈÄ£Êê∫Ê©üËÉΩ„ÅØÊú™ÂÆüË£Ö
  return {
    success: true,
    hasForm: false,
    formUrl: null,
    formTitle: null,
    message: '„Éï„Ç©„Éº„É†ÈÄ£Êê∫Ê©üËÉΩ„ÅØÂ∞ÜÊù•„ÅÆ„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„ÅßÊèê‰æõ‰∫àÂÆö„Åß„Åô'
  };
}

/**
 * Ë®≠ÂÆö„ÅÆ‰∏ãÊõ∏„Åç„Çí‰øùÂ≠ò
 * AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {Object} config - ‰øùÂ≠ò„Åô„ÇãË®≠ÂÆö
 * @returns {Object} ‰øùÂ≠òÁµêÊûú
 */
function saveDraftConfiguration(config) {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // ConfigService„Çí‰ΩøÁî®„Åó„Å¶Ë®≠ÂÆö„Çí‰øùÂ≠ò
    const result = ConfigService.saveUserConfig(userInfo.userId, config);
    
    if (result.success) {
      return {
        success: true,
        message: 'Ë®≠ÂÆö„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü'
      };
    } else {
      return {
        success: false,
        message: result.error || 'Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      };
    }
  } catch (error) {
    console.error('saveDraftConfiguration „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂÖ¨Èñã
 * AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {Object} publishConfig - ÂÖ¨ÈñãË®≠ÂÆö
 * @returns {Object} ÂÖ¨ÈñãÁµêÊûú
 */
function publishApplication(publishConfig) {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // ÁèæÂú®„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
    const currentConfig = ConfigService.getUserConfig(userInfo.userId) || {};
    
    // ÂÖ¨ÈñãË®≠ÂÆö„Çí„Éû„Éº„Ç∏
    const updatedConfig = {
      ...currentConfig,
      ...publishConfig,
      appPublished: true,
      publishedAt: new Date().toISOString(),
      setupStatus: 'completed'
    };
    
    // Ë®≠ÂÆö„Çí‰øùÂ≠ò
    const result = ConfigService.saveUserConfig(userInfo.userId, updatedConfig);
    
    if (result.success) {
      return {
        success: true,
        message: '„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂÖ¨Èñã„Åó„Åæ„Åó„Åü',
        appUrl: getWebAppUrl()
      };
    } else {
      return {
        success: false,
        message: result.error || 'ÂÖ¨Èñã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      };
    }
  } catch (error) {
    console.error('publishApplication „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Åã„Å©„ÅÜ„Åã„ÇíÁ¢∫Ë™ç
 * AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {boolean} „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Åã„Å©„ÅÜ„Åã
 */
function checkIsSystemAdmin() {
  try {
    return UserService.isSystemAdmin();
  } catch (error) {
    console.error('checkIsSystemAdmin „Ç®„É©„Éº:', error.message);
    return false;
  }
}

/**
 * ÁèæÂú®„ÅÆ„Éú„Éº„ÉâÊÉÖÂ†±„Å®URL„ÇíÂèñÂæó
 * AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} „Éú„Éº„ÉâÊÉÖÂ†±
 */
function getCurrentBoardInfoAndUrls() {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    const config = ConfigService.getUserConfig(userInfo.userId);
    const baseUrl = getWebAppUrl();
    
    return {
      success: true,
      boardInfo: {
        userId: userInfo.userId,
        email: userInfo.userEmail || UserService.getCurrentEmail(),
        spreadsheetId: config?.spreadsheetId,
        sheetName: config?.sheetName,
        isPublished: config?.appPublished || false,
        publishedAt: config?.publishedAt
      },
      urls: {
        viewUrl: baseUrl,
        adminUrl: `${baseUrl}?mode=admin`,
        debugUrl: `${baseUrl}?mode=debug`
      }
    };
  } catch (error) {
    console.error('getCurrentBoardInfoAndUrls „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÇíÊ§úË®º
 * AdminPanel.js.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} spreadsheetId - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID
 * @returns {Object} „Ç¢„ÇØ„Çª„ÇπÊ§úË®ºÁµêÊûú
 */
function validateAccess(spreadsheetId) {
  try {
    if (!spreadsheetId) {
      return {
        success: false,
        hasAccess: false,
        message: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
      };
    }
    
    // „Ç¢„ÇØ„Çª„Çπ„ÇíË©¶Ë°å
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const name = spreadsheet.getName();
    
    return {
      success: true,
      hasAccess: true,
      spreadsheetName: name,
      message: '„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Åß„Åô'
    };
  } catch (error) {
    console.error('validateAccess „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      hasAccess: false,
      message: `„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì: ${  error.message}`
    };
  }
}

// ==============================================================================
// „Åù„ÅÆ‰ªñ„ÅÆ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
// ==============================================================================

/**
 * „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç®„É©„Éº„ÇíÂ†±Âëä
 * ErrorBoundary.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {Object} errorInfo - „Ç®„É©„ÉºÊÉÖÂ†±
 * @returns {Object} Â†±ÂëäÁµêÊûú
 */
function reportClientError(errorInfo) {
  try {
    console.error('„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Ç®„É©„ÉºÂ†±Âëä:', errorInfo);
    
    // „Ç®„É©„Éº„É≠„Ç∞„ÇíË®òÈå≤ÔºàÂ∞ÜÊù•ÁöÑ„Å´„ÅØSecurityService„ÇÑÂ∞ÇÁî®„ÅÆ„É≠„Ç∞„Çµ„Éº„Éì„Çπ„Å´ÂßîË≠≤Ôºâ
    const logEntry = {
      timestamp: new Date().toISOString(),
      type: 'client_error',
      userEmail: UserService.getCurrentEmail() || 'unknown',
      errorInfo
    };
    
    // „Ç≥„É≥„ÇΩ„Éº„É´„Å´„É≠„Ç∞Âá∫ÂäõÔºàÂ∞ÜÊù•ÁöÑ„Å´„ÅØÊ∞∏Á∂öÂåñÔºâ
    console.log('Error Log Entry:', JSON.stringify(logEntry));
    
    return {
      success: true,
      message: '„Ç®„É©„Éº„ÅåÂ†±Âëä„Åï„Çå„Åæ„Åó„Åü'
    };
  } catch (error) {
    console.error('reportClientError „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * Âº∑Âà∂„É≠„Ç∞„Ç¢„Ç¶„Éà„Å®„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„ÅÆ„ÉÜ„Çπ„Éà
 * ErrorBoundary.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} „ÉÜ„Çπ„ÉàÁµêÊûú
 */
function testForceLogoutRedirect() {
  try {
    console.log('Âº∑Âà∂„É≠„Ç∞„Ç¢„Ç¶„Éà„ÉÜ„Çπ„Éà„ÅåÂÆüË°å„Åï„Çå„Åæ„Åó„Åü');
    
    return {
      success: true,
      message: '„É≠„Ç∞„Ç¢„Ç¶„Éà„ÉÜ„Çπ„ÉàÂÆå‰∫Ü',
      redirectUrl: `${getWebAppUrl()  }?mode=login`
    };
  } catch (error) {
    console.error('testForceLogoutRedirect „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * Ë™çË®º„Çí„É™„Çª„ÉÉ„Éà
 * SharedUtilities.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} „É™„Çª„ÉÉ„ÉàÁµêÊûú
 */
function resetAuth() {
  try {
    console.log('Ë™çË®º„É™„Çª„ÉÉ„Éà„ÅåË¶ÅÊ±Ç„Åï„Çå„Åæ„Åó„Åü');
    
    // „Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢
    const cache = CacheService.getScriptCache();
    cache.removeAll(['user_session', 'auth_token']);
    
    return {
      success: true,
      message: 'Ë™çË®º„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Åæ„Åó„Åü',
      redirectUrl: `${getWebAppUrl()  }?mode=login`
    };
  } catch (error) {
    console.error('resetAuth „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „É¶„Éº„Ç∂„ÉºË™çË®º„ÇíÊ§úË®º
 * SharedUtilities.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} Ë™çË®ºÊ§úË®ºÁµêÊûú
 */
function verifyUserAuthentication() {
  try {
    const userEmail = UserService.getCurrentEmail();
    const userInfo = UserService.getCurrentUserInfo();
    
    return {
      success: true,
      authenticated: !!userEmail,
      email: userEmail,
      hasUserInfo: !!userInfo,
      userId: userInfo?.userId
    };
  } catch (error) {
    console.error('verifyUserAuthentication „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      authenticated: false,
      message: error.message
    };
  }
}

/**
 * „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàURL„ÇíËøΩÂä†
 * Unpublished.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @param {string} url - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàURL
 * @returns {Object} ËøΩÂä†ÁµêÊûú
 */
function addSpreadsheetUrl(url) {
  try {
    // URL„Åã„Çâ„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„ÇíÊäΩÂá∫
    const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
    if (!match) {
      return {
        success: false,
        message: 'ÁÑ°Âäπ„Å™„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàURL„Åß„Åô'
      };
    }
    
    const spreadsheetId = match[1];
    
    // „Ç¢„ÇØ„Çª„Çπ„ÇíÁ¢∫Ë™ç
    try {
      const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
      const name = spreadsheet.getName();
    } catch (accessError) {
      return {
        success: false,
        message: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì'
      };
    }
    
    // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // Ë®≠ÂÆö„ÇíÊõ¥Êñ∞
    const config = ConfigService.getUserConfig(userInfo.userId) || {};
    config.spreadsheetId = spreadsheetId;
    config.spreadsheetUrl = url;
    
    const result = ConfigService.saveUserConfig(userInfo.userId, config);
    
    if (result.success) {
      return {
        success: true,
        message: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„ÇíË®≠ÂÆö„Åó„Åæ„Åó„Åü',
        spreadsheetId
      };
    } else {
      return {
        success: false,
        message: result.error || 'Ë®≠ÂÆö„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      };
    }
  } catch (error) {
    console.error('addSpreadsheetUrl „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * ÁÆ°ÁêÜËÄÖÂÖ®„É¶„Éº„Ç∂„ÉºÂèñÂæóÔºà„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÂ∞ÇÁî®Ôºâ
 * @param {Object} options - ÂèñÂæó„Ç™„Éó„Ç∑„Éß„É≥
 * @returns {Object} „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„Åæ„Åü„ÅØÊ®©Èôê„Ç®„É©„Éº
 */
function getAllUsersForAdminForUI(options = {}) {
  try {
    console.log('getAllUsersForAdminForUI: „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ©üËÉΩÂÆüË°å');
    
    // üîí ‰∫åÈáç„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ: „Çª„ÉÉ„Ç∑„Éß„É≥+Ê®©Èôê
    const currentEmail = UserService.getCurrentEmail();
    if (!currentEmail) {
      return {
        success: false,
        message: 'Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    // „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà„É°„Éº„É´„Éô„Éº„ÇπÔºâ
    const isAdmin = UserService.isSystemAdmin(currentEmail);
    if (!isAdmin) {
      // üö® Ê®©ÈôêÈÅïÂèç„Çí„É≠„Ç∞Ë®òÈå≤
      SecurityService.persistSecurityLog({
        event: 'UNAUTHORIZED_ADMIN_ACCESS',
        severity: 'HIGH',
        details: { attemptedBy: currentEmail, function: 'getAllUsersForAdminForUI' }
      });
      
      return {
        success: false,
        message: '„Åì„ÅÆÊ©üËÉΩ„Å´„ÅØ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    // ÂÖ®„É¶„Éº„Ç∂„ÉºÂèñÂæó
    const users = DB.getAllUsers();
    const userList = users.map(user => ({
      userId: user.userId,
      userEmail: user.userEmail,
      isActive: user.isActive,
      lastModified: user.lastModified,
      configSummary: (() => {
        try {
          const config = JSON.parse(user.configJson || '{}');
          return {
            setupStatus: config.setupStatus || 'pending',
            appPublished: config.appPublished || false,
            spreadsheetId: config.spreadsheetId ? 'Ë®≠ÂÆöÊ∏à„Åø' : 'Êú™Ë®≠ÂÆö',
            lastAccessedAt: config.lastAccessedAt || '‰∏çÊòé'
          };
        } catch (e) {
          return { error: 'configËß£Êûê„Ç®„É©„Éº' };
        }
      })()
    }));
    
    return {
      success: true,
      users: userList,
      totalCount: userList.length,
      activeCount: userList.filter(u => u.isActive).length
    };
  } catch (error) {
    console.error('getAllUsersForAdminForUI „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „É¶„Éº„Ç∂„Éº„Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§Ôºà„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÂ∞ÇÁî®Ôºâ
 * @param {string} targetUserId - ÂâäÈô§ÂØæË±°„ÅÆ„É¶„Éº„Ç∂„ÉºID
 * @returns {Object} ÂâäÈô§ÁµêÊûú
 */
function deleteUserAccountByAdminForUI(targetUserId) {
  try {
    console.log('deleteUserAccountByAdminForUI: „É¶„Éº„Ç∂„ÉºÂâäÈô§ÂÆüË°å:', targetUserId);
    
    // üîí Âé≥Ê†º„Å™Ë™çË®º„ÉÅ„Çß„ÉÉ„ÇØ
    const currentEmail = UserService.getCurrentEmail();
    if (!currentEmail) {
      return {
        success: false,
        message: 'Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    // „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà„É°„Éº„É´„Éô„Éº„ÇπÔºâ
    const isAdmin = UserService.isSystemAdmin(currentEmail);
    if (!isAdmin) {
      // üö® ÈáçÂ§ß„Å™Ê®©ÈôêÈÅïÂèç„Çí„É≠„Ç∞Ë®òÈå≤
      SecurityService.persistSecurityLog({
        event: 'UNAUTHORIZED_USER_DELETE_ATTEMPT',
        severity: 'CRITICAL',
        details: { 
          attemptedBy: currentEmail, 
          targetUserId,
          timestamp: new Date().toISOString()
        }
      });
      
      return {
        success: false,
        message: '„Åì„ÅÆÊ©üËÉΩ„Å´„ÅØ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    if (!targetUserId) {
      return {
        success: false,
        message: 'ÂâäÈô§ÂØæË±°„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
      };
    }
    
    // Ëá™ÂàÜËá™Ë∫´„ÅÆÂâäÈô§Èò≤Ê≠¢
    const currentUserInfo = UserService.getCurrentUserInfo();
    if (currentUserInfo && currentUserInfo.userId === targetUserId) {
      return {
        success: false,
        message: 'Ëá™ÂàÜËá™Ë∫´„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅØÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì'
      };
    }
    
    // ÂØæË±°„É¶„Éº„Ç∂„ÉºÂ≠òÂú®Á¢∫Ë™ç
    const targetUser = DB.findUserById(targetUserId);
    if (!targetUser) {
      return {
        success: false,
        message: 'ÂâäÈô§ÂØæË±°„ÅÆ„É¶„Éº„Ç∂„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // „É¶„Éº„Ç∂„ÉºÂâäÈô§ÂÆüË°å
    const deleteResult = DB.deleteUser(targetUserId);
    if (deleteResult) {
      // ÂâäÈô§„É≠„Ç∞„ÅÆË®òÈå≤
      SecurityService.persistSecurityLog({
        event: 'USER_DELETION',
        severity: 'HIGH',
        details: {
          deletedUserId: targetUserId,
          deletedUserEmail: targetUser.userEmail,
          deletedBy: currentUserInfo?.userEmail || 'unknown'
        }
      });
      
      return {
        success: true,
        message: `„É¶„Éº„Ç∂„Éº ${targetUser.userEmail} „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`,
        deletedUser: {
          userId: targetUserId,
          userEmail: targetUser.userEmail
        }
      };
    } else {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      };
    }
  } catch (error) {
    console.error('deleteUserAccountByAdminForUI „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * Âº∑Âà∂„É≠„Ç∞„Ç¢„Ç¶„Éà„Éª„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÔºà„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÂ∞ÇÁî®Ôºâ
 * @returns {HtmlOutput} „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜ„ÅÆHTML
 */
function forceLogoutAndRedirectToLogin() {
  try {
    console.log('forceLogoutAndRedirectToLogin: Âº∑Âà∂„É≠„Ç∞„Ç¢„Ç¶„ÉàÂÆüË°å');
    
    // „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºà„É≠„Ç∞„ÅÇ„ÇäÔºâ
    const isAdmin = UserService.isSystemAdmin();
    if (isAdmin) {
      console.log('forceLogoutAndRedirectToLogin: „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖ„Å´„Çà„ÇãÂÆüË°å');
    }
    
    // „Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±„ÇØ„É™„Ç¢ÔºàÂèØËÉΩ„Å™ÁØÑÂõ≤„ÅßÔºâ
    try {
      // GAS„Åß„ÅØÂÆåÂÖ®„Å™„Çª„ÉÉ„Ç∑„Éß„É≥„ÇØ„É™„Ç¢„ÅØÂõ∞Èõ£„Å†„Åå„ÄÅ„É≠„Ç∞„ÅØË®òÈå≤
      const currentUserInfo = UserService.getCurrentUserInfo();
      if (currentUserInfo) {
        SecurityService.persistSecurityLog({
          event: 'FORCE_LOGOUT',
          severity: 'MEDIUM',
          details: {
            userEmail: currentUserInfo.userEmail,
            triggeredBy: isAdmin ? 'system_admin' : 'user'
          }
        });
      }
    } catch (logError) {
      console.warn('forceLogoutAndRedirectToLogin: „É≠„Ç∞Ë®òÈå≤„Ç®„É©„Éº:', logError.message);
    }
    
    // „É≠„Ç∞„Ç§„É≥ÁîªÈù¢„Å∏„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
    const loginUrl = `${getWebAppUrl()  }?mode=login&forced=true`;
    return createRedirect(loginUrl);
  } catch (error) {
    console.error('forceLogoutAndRedirectToLogin „Ç®„É©„Éº:', error.message);
    return HtmlService.createHtmlOutput(`
      <h2>„É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜ„Ç®„É©„Éº</h2>
      <p>„Ç®„É©„Éº: ${error.message}</p>
      <p><a href="${getWebAppUrl()}">„Éõ„Éº„É†„Å´Êàª„Çã</a></p>
    `).setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * „Éá„Éº„ÇøÈñ¢ÈÄ£Èñ¢Êï∞ÔºöÂâäÈô§„É≠„Ç∞ÂèñÂæóÔºà„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÂ∞ÇÁî®Ôºâ
 * @param {Object} options - ÂèñÂæó„Ç™„Éó„Ç∑„Éß„É≥ÔºàÊúüÈñì„ÄÅÂà∂ÈôêÊï∞„Å™„Å©Ôºâ
 * @returns {Object} ÂâäÈô§„É≠„Ç∞‰∏ÄË¶ß
 */
function getDeletionLogsForUI(options = {}) {
  try {
    console.log('getDeletionLogsForUI: ÂâäÈô§„É≠„Ç∞ÂèñÂæó');
    
    // „Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    const isAdmin = UserService.isSystemAdmin();
    if (!isAdmin) {
      return {
        success: false,
        message: '„Åì„ÅÆÊ©üËÉΩ„Å´„ÅØ„Ç∑„Çπ„ÉÜ„É†ÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    // SecurityServiceÁµåÁî±„Åß„É≠„Ç∞ÂèñÂæó
    const logs = SecurityService.getSecurityLogs({
      eventType: 'USER_DELETION',
      limit: options.limit || 50,
      startDate: options.startDate,
      endDate: options.endDate
    });
    
    return {
      success: true,
      logs,
      totalCount: logs.length
    };
  } catch (error) {
    console.error('getDeletionLogsForUI „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „É¶„Éº„Ç∂„Éº„É≠„Ç∞„Ç§„É≥„Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó
 * @returns {Object} „É≠„Ç∞„Ç§„É≥Áä∂ÊÖãÊÉÖÂ†±
 */
function getLoginStatus() {
  try {
    const currentUserInfo = UserService.getCurrentUserInfo();
    
    if (!currentUserInfo) {
      return {
        isLoggedIn: false,
        message: '„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì'
      };
    }
    
    return {
      isLoggedIn: true,
      userEmail: currentUserInfo.userEmail,
      userId: currentUserInfo.userId,
      isActive: currentUserInfo.isActive,
      isSystemAdmin: UserService.isSystemAdmin()
    };
  } catch (error) {
    console.error('getLoginStatus „Ç®„É©„Éº:', error.message);
    return {
      isLoggedIn: false,
      message: '„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÅÆÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
      error: error.message
    };
  }
}

/**
 * „Ç∑„Çπ„ÉÜ„É†„Éâ„É°„Ç§„É≥ÊÉÖÂ†±ÂèñÂæó
 * @returns {Object} „Éâ„É°„Ç§„É≥ÊÉÖÂ†±
 */
function getSystemDomainInfo() {
  try {
    const webAppUrl = getWebAppUrl();
    const domain = new URL(webAppUrl).hostname;
    
    return {
      success: true,
      webAppUrl,
      domain,
      scriptId: ScriptApp.getScriptId()
    };
  } catch (error) {
    console.error('getSystemDomainInfo „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Ç∑„Çπ„ÉÜ„É†„Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó
 * @returns {Object} „Ç∑„Çπ„ÉÜ„É†ÂÖ®‰Ωì„ÅÆÁä∂ÊÖã
 */
function getSystemStatus() {
  try {
    // Âü∫Êú¨„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±
    const currentUser = UserService.getCurrentUserInfo();
    const isAdmin = UserService.isSystemAdmin();
    
    // „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆöÁä∂Ê≥Å
    const hasSystemProps = ConfigService.hasCoreSystemProps();
    const systemSetup = ConfigService.isSystemSetup();
    
    // Áµ±Ë®àÊÉÖÂ†±
    const userCount = DB.getAllUsers().length;
    const activeUserCount = DB.getAllUsers().filter(u => u.isActive).length;
    
    return {
      success: true,
      system: {
        hasSystemProps,
        systemSetup,
        scriptId: ScriptApp.getScriptId(),
        webAppUrl: getWebAppUrl()
      },
      user: {
        isLoggedIn: !!currentUser,
        userEmail: currentUser?.userEmail,
        isSystemAdmin: isAdmin
      },
      statistics: {
        totalUsers: userCount,
        activeUsers: activeUserCount
      },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    console.error('getSystemStatus „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Éò„ÉÉ„ÉÄ„Éº„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÂèñÂæóÔºàÂàó„Éû„ÉÉ„Éî„É≥„Ç∞ÊîØÊè¥Ôºâ
 * @param {string} spreadsheetId - „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID
 * @param {string} sheetName - „Ç∑„Éº„ÉàÂêç
 * @returns {Object} „Éò„ÉÉ„ÉÄ„ÉºÊÉÖÂ†±
 */
function getHeaderIndices(spreadsheetId, sheetName) {
  try {
    console.log('getHeaderIndices: „Éò„ÉÉ„ÉÄ„ÉºËß£ÊûêÈñãÂßã:', { spreadsheetId, sheetName });
    
    if (!spreadsheetId || !sheetName) {
      return {
        success: false,
        message: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„Å®„Ç∑„Éº„ÉàÂêç„ÅåÂøÖË¶Å„Åß„Åô'
      };
    }
    
    // DataServiceÁµåÁî±„Åß„Éò„ÉÉ„ÉÄ„ÉºÊÉÖÂ†±ÂèñÂæó
    const headerInfo = DataService.analyzeSheetStructure(spreadsheetId, sheetName);
    
    if (!headerInfo.success) {
      return headerInfo;
    }
    
    return {
      success: true,
      headers: headerInfo.headers,
      indices: headerInfo.indices,
      suggestions: headerInfo.suggestions
    };
  } catch (error) {
    console.error('getHeaderIndices „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * ÂÖ¨Èñã„Ç∑„Éº„Éà„Éá„Éº„ÇøÂèñÂæó
 * @param {string} userId - „É¶„Éº„Ç∂„ÉºID
 * @param {Object} options - ÂèñÂæó„Ç™„Éó„Ç∑„Éß„É≥
 * @returns {Object} ÂÖ¨Èñã„Éá„Éº„Çø„Åæ„Åü„ÅØ„Ç®„É©„Éº
 */
function getPublishedSheetData(userId, options = {}) {
  try {
    console.log('getPublishedSheetData: ÂÖ¨Èñã„Éá„Éº„ÇøÂèñÂæóÈñãÂßã:', userId);
    
    if (!userId) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
      };
    }
    
    // DataServiceÁµåÁî±„Åß„Éá„Éº„ÇøÂèñÂæó
    const data = DataService.getBulkData(userId, {
      classFilter: options.classFilter,
      sortOrder: options.sortOrder || 'desc',
      includeReactions: true,
      adminMode: options.adminMode || false
    });
    
    return data;
  } catch (error) {
    console.error('getPublishedSheetData „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „É¶„Éº„Ç∂„ÉºË™çË®ºÁ¢∫Ë™çÔºà„Ç∑„É≥„Éó„É´ÁâàÔºâ
 * @returns {Object} Ë™çË®ºÁä∂ÊÖã
 */
function confirmUserRegistration() {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„Éº„ÅåË™çË®º„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
      };
    }
    
    return {
      success: true,
      user: {
        userId: userInfo.userId,
        userEmail: userInfo.userEmail,
        isActive: userInfo.isActive
      }
    };
  } catch (error) {
    console.error('confirmUserRegistration „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}


/**
 * „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ë®≠ÂÆöÂàá„ÇäÊõø„ÅàÔºàÊúâÂäπ/ÁÑ°ÂäπÔºâ
 * @param {boolean} enabled - ÊúâÂäπ„Å´„Åô„Çã„Åã„Å©„ÅÜ„Åã
 * @returns {Object} Âàá„ÇäÊõø„ÅàÁµêÊûú
 */
function setApplicationStatusForUI(enabled) {
  try {
    console.log('setApplicationStatusForUI: „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Áä∂ÊÖãÂ§âÊõ¥:', enabled);
    
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØÔºàÊâÄÊúâËÄÖ„ÅÆ„ÅøÔºâ
    const hasPermission = SecurityService.checkUserPermission(userInfo.userId, 'OWNER');
    if (!hasPermission.hasPermission) {
      return {
        success: false,
        message: hasPermission.reason
      };
    }
    
    const config = ConfigService.getUserConfig(userInfo.userId);
    if (!config) {
      return {
        success: false,
        message: 'Ë®≠ÂÆö„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    // Áä∂ÊÖãÊõ¥Êñ∞
    config.appPublished = Boolean(enabled);
    if (enabled) {
      config.setupStatus = 'completed';
      config.publishedAt = new Date().toISOString();
    }
    
    const result = ConfigService.saveUserConfig(userInfo.userId, config);
    
    if (result.success) {
      return {
        success: true,
        message: enabled ? '„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÊúâÂäπ„Å´„Åó„Åæ„Åó„Åü' : '„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÁÑ°Âäπ„Å´„Åó„Åæ„Åó„Åü',
        status: {
          appPublished: config.appPublished,
          setupStatus: config.setupStatus
        }
      };
    } else {
      return {
        success: false,
        message: result.error || 'Áä∂ÊÖã„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
      };
    }
  } catch (error) {
    console.error('setApplicationStatusForUI „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * X-Frame-OptionsÂØæÂøú„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÈñ¢Êï∞
 * „Çª„Ç≠„É•„É™„ÉÜ„Ç£‰∏äÈáçË¶Å„Å™ÂÆâÂÖ®„Å™„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂá¶ÁêÜ
 * 
 * @param {string} url - „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàÂÖàURL
 * @returns {GoogleAppsScript.HTML.HtmlOutput} „É™„ÉÄ„Ç§„É¨„ÇØ„ÉàHTML
 */
function createRedirect(url) {
  try {
    if (!url || typeof url !== 'string') {
      throw new Error('ÊúâÂäπ„Å™URL„ÅåÂøÖË¶Å„Åß„Åô');
    }
    
    // URL„ÅÆÂü∫Êú¨ÁöÑ„Å™Ê§úË®º
    const urlPattern = /^https?:\/\/.+/;
    if (!urlPattern.test(url)) {
      throw new Error('HTTP„Åæ„Åü„ÅØHTTPS„ÅÆURL„ÅåÂøÖË¶Å„Åß„Åô');
    }
    
    const script = `
      <script>
        try {
          // X-Frame-OptionsÂØæÂøú: Ë¶™„Éï„É¨„Éº„É†„Å®„Çµ„Éñ„Éï„É¨„Éº„É†„ÅÆ‰∏°Êñπ„Å´ÂØæÂøú
          if (window.top && window.top.location && window.top !== window) {
            window.top.location.href = '${url}';
          } else {
            window.location.href = '${url}';
          }
        } catch (e) {
          // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÈÄöÂ∏∏„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„Éà
          window.location.href = '${url}';
        }
      </script>
    `;
    
    return HtmlService.createHtmlOutput(script)
      .setTitle('Redirecting...')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } catch (error) {
    console.error('createRedirect „Ç®„É©„Éº:', error.message);
    // „Ç®„É©„ÉºÊôÇ„ÅØÂÆâÂÖ®„Å™„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇíËøî„Åô
    return HtmlService.createHtmlOutput(`
      <h2>Redirect Error</h2>
      <p>„É™„ÉÄ„Ç§„É¨„ÇØ„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}</p>
      <p><a href="${getWebAppUrl()}">„Éõ„Éº„É†„Å´Êàª„Çã</a></p>
    `).setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

/**
 * UIÁî®„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Áä∂ÊÖã„ÇíÂèñÂæó
 * AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Áä∂ÊÖãÊÉÖÂ†±
 */
function getApplicationStatusForUI() {
  try {
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      return {
        success: false,
        message: '„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì'
      };
    }
    
    const config = ConfigService.getUserConfig(userInfo.userId) || {};
    const props = PropertiesService.getScriptProperties();
    
    // „Ç∑„Çπ„ÉÜ„É†ÂÖ®‰Ωì„ÅÆÁä∂ÊÖã
    const systemStatus = {
      hasServiceAccount: !!props.getProperty(PROPS_KEYS.SERVICE_ACCOUNT_CREDS),
      hasDatabaseId: !!props.getProperty(PROPS_KEYS.DATABASE_SPREADSHEET_ID),
      hasAdminEmail: !!props.getProperty(PROPS_KEYS.ADMIN_EMAIL),
      isInitialized: props.getProperty('SYSTEM_INITIALIZED') === 'true'
    };
    
    // „É¶„Éº„Ç∂„ÉºÂõ∫Êúâ„ÅÆÁä∂ÊÖã
    const userStatus = {
      userId: userInfo.userId,
      userEmail: userInfo.userEmail || UserService.getCurrentEmail(),
      isOwner: true, // ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„Éº„ÅØËá™ÂàÜ„ÅÆË®≠ÂÆö„ÅÆÊâÄÊúâËÄÖ
      isSystemAdmin: UserService.isSystemAdmin(),
      
      // Ë®≠ÂÆöÁä∂ÊÖã
      hasSpreadsheet: !!config.spreadsheetId,
      hasSheetName: !!config.sheetName,
      setupStatus: config.setupStatus || 'pending',
      isPublished: config.appPublished || false,
      publishedAt: config.publishedAt,
      
      // ÊúÄÁµÇÊõ¥Êñ∞ÊÉÖÂ†±
      lastModified: config.lastModified || userInfo.lastModified,
      configVersion: config.version || '1.0.0'
    };
    
    // ÂÆå‰∫ÜÁéá„ÅÆË®àÁÆó
    const completionItems = [
      systemStatus.hasServiceAccount,
      systemStatus.hasDatabaseId,
      systemStatus.hasAdminEmail,
      userStatus.hasSpreadsheet,
      userStatus.hasSheetName
    ];
    const completionRate = Math.round((completionItems.filter(Boolean).length / completionItems.length) * 100);
    
    // Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÊèêÊ°à
    const nextSteps = [];
    if (!systemStatus.hasServiceAccount) nextSteps.push('Service AccountË®≠ÂÆö');
    if (!systemStatus.hasDatabaseId) nextSteps.push('„Éá„Éº„Çø„Éô„Éº„ÇπË®≠ÂÆö');
    if (!systemStatus.hasAdminEmail) nextSteps.push('ÁÆ°ÁêÜËÄÖ„É°„Éº„É´Ë®≠ÂÆö');
    if (!userStatus.hasSpreadsheet) nextSteps.push('„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÈÅ∏Êäû');
    if (!userStatus.hasSheetName) nextSteps.push('„Ç∑„Éº„ÉàÂêçË®≠ÂÆö');
    if (nextSteps.length === 0 && !userStatus.isPublished) nextSteps.push('„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂÖ¨Èñã');
    
    return {
      success: true,
      systemStatus,
      userStatus,
      completionRate,
      nextSteps,
      canPublish: completionRate >= 80,
      lastUpdated: new Date().toISOString()
    };
  } catch (error) {
    console.error('getApplicationStatusForUI „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Ç∑„Çπ„ÉÜ„É†Ë®∫Êñ≠„ÇíÂÆüË°å
 * AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} Ë®∫Êñ≠ÁµêÊûú
 */
function testSystemDiagnosis() {
  try {
    const diagnostics = {
      timestamp: new Date().toISOString(),
      services: {},
      system: {},
      summary: { passed: 0, failed: 0, warnings: 0 }
    };
    
    // ÂêÑ„Çµ„Éº„Éì„Çπ„ÅÆË®∫Êñ≠„ÇíÂÆüË°å
    try {
      diagnostics.services.UserService = UserService.diagnose();
      if (diagnostics.services.UserService.status === 'healthy') diagnostics.summary.passed++;
      else diagnostics.summary.failed++;
    } catch (e) {
      diagnostics.services.UserService = { status: 'error', message: e.message };
      diagnostics.summary.failed++;
    }
    
    try {
      diagnostics.services.ConfigService = ConfigService.diagnose();
      if (diagnostics.services.ConfigService.status === 'healthy') diagnostics.summary.passed++;
      else diagnostics.summary.failed++;
    } catch (e) {
      diagnostics.services.ConfigService = { status: 'error', message: e.message };
      diagnostics.summary.failed++;
    }
    
    try {
      diagnostics.services.DataService = DataService.diagnose();
      if (diagnostics.services.DataService.status === 'healthy') diagnostics.summary.passed++;
      else diagnostics.summary.failed++;
    } catch (e) {
      diagnostics.services.DataService = { status: 'error', message: e.message };
      diagnostics.summary.failed++;
    }
    
    try {
      diagnostics.services.SecurityService = SecurityService.diagnose();
      if (diagnostics.services.SecurityService.status === 'healthy') diagnostics.summary.passed++;
      else diagnostics.summary.failed++;
    } catch (e) {
      diagnostics.services.SecurityService = { status: 'error', message: e.message };
      diagnostics.summary.failed++;
    }
    
    // „Ç∑„Çπ„ÉÜ„É†„É¨„Éô„É´„ÅÆË®∫Êñ≠
    const props = PropertiesService.getScriptProperties();
    diagnostics.system = {
      hasServiceAccount: !!props.getProperty(PROPS_KEYS.SERVICE_ACCOUNT_CREDS),
      hasDatabaseId: !!props.getProperty(PROPS_KEYS.DATABASE_SPREADSHEET_ID),
      hasAdminEmail: !!props.getProperty(PROPS_KEYS.ADMIN_EMAIL),
      webAppUrl: getWebAppUrl(),
      currentUser: UserService.getCurrentEmail()
    };
    
    // Á∑èÂêàË©ï‰æ°
    const overallHealth = diagnostics.summary.failed === 0 ? 'healthy' : 
                         diagnostics.summary.failed < diagnostics.summary.passed ? 'warning' : 'critical';
    
    return {
      success: true,
      health: overallHealth,
      diagnostics,
      recommendations: generateRecommendations(diagnostics)
    };
  } catch (error) {
    console.error('testSystemDiagnosis „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * Ëá™Âãï‰øÆÂæ©„ÇíÂÆüË°å
 * AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} ‰øÆÂæ©ÁµêÊûú
 */
function performAutoRepair() {
  try {
    const repairResults = {
      timestamp: new Date().toISOString(),
      repairs: [],
      success: 0,
      failed: 0
    };
    
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      throw new Error('„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    }
    
    // 1. Ë®≠ÂÆö„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ„Å®‰øÆÂæ©
    try {
      const config = ConfigService.getUserConfig(userInfo.userId) || {};
      let needsUpdate = false;
      const updates = { ...config };
      
      // setupStatus „Å® appPublished „ÅÆÊï¥ÂêàÊÄß‰øÆÂæ©
      if (config.appPublished && config.setupStatus !== 'completed') {
        updates.setupStatus = 'completed';
        needsUpdate = true;
        repairResults.repairs.push('„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÁä∂ÊÖã„Çí„Äåcompleted„Äç„Å´‰øÆÂæ©');
      }
      
      // „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆË£úÂÆå
      if (!config.version) {
        updates.version = '1.0.0';
        needsUpdate = true;
        repairResults.repairs.push('„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíËøΩÂä†');
      }
      
      // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅÆË£úÂÆå
      if (!config.lastModified) {
        updates.lastModified = new Date().toISOString();
        needsUpdate = true;
        repairResults.repairs.push('ÊúÄÁµÇÊõ¥Êñ∞Êó•ÊôÇ„ÇíËøΩÂä†');
      }
      
      if (needsUpdate) {
        const result = ConfigService.saveUserConfig(userInfo.userId, updates);
        if (result.success) {
          repairResults.success++;
        } else {
          repairResults.failed++;
          repairResults.repairs.push(`Ë®≠ÂÆöÊõ¥Êñ∞Â§±Êïó: ${  result.error}`);
        }
      }
    } catch (configError) {
      repairResults.failed++;
      repairResults.repairs.push(`Ë®≠ÂÆö‰øÆÂæ©„Ç®„É©„Éº: ${  configError.message}`);
    }
    
    // 2. „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆ„ÇØ„É™„Ç¢
    try {
      const cache = CacheService.getScriptCache();
      cache.removeAll(['stale_data', 'invalid_config']);
      repairResults.success++;
      repairResults.repairs.push('Âè§„ÅÑ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢');
    } catch (cacheError) {
      repairResults.failed++;
      repairResults.repairs.push(`„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„Ç®„É©„Éº: ${  cacheError.message}`);
    }
    
    return {
      success: true,
      repairResults,
      message: `‰øÆÂæ©ÂÆå‰∫Ü: ${repairResults.success}‰ª∂ÊàêÂäü, ${repairResults.failed}‰ª∂Â§±Êïó`
    };
  } catch (error) {
    console.error('performAutoRepair „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñ„ÇíÂÆüË°å
 * AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} Áõ£Ë¶ñÁµêÊûú
 */
function performSystemMonitoring() {
  try {
    const monitoring = {
      timestamp: new Date().toISOString(),
      metrics: {
        responseTime: Date.now(),
        memoryUsage: 'N/A', // GAS„Åß„ÅØÁõ¥Êé•ÂèñÂæó‰∏çÂèØ
        executionTime: 0
      },
      alerts: [],
      status: 'monitoring'
    };
    
    const startTime = Date.now();
    
    // 1. Âü∫Êú¨„Çµ„Éº„Éì„Çπ„ÅÆÂøúÁ≠îÊÄßËÉΩ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    try {
      const userCheck = UserService.getCurrentEmail();
      const configCheck = ConfigService.diagnose();
      const dataCheck = DataService.diagnose();
      
      monitoring.serviceHealth = {
        userService: !!userCheck,
        configService: configCheck.status === 'healthy',
        dataService: dataCheck.status === 'healthy'
      };
    } catch (serviceError) {
      monitoring.alerts.push(`„Çµ„Éº„Éì„Çπ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº: ${  serviceError.message}`);
    }
    
    // 2. „Ç∑„Çπ„ÉÜ„É†„É™„ÇΩ„Éº„Çπ„ÅÆÁõ£Ë¶ñ
    try {
      const props = PropertiesService.getScriptProperties();
      const allProps = props.getProperties();
      
      monitoring.systemResources = {
        propertiesCount: Object.keys(allProps).length,
        hasRequiredProps: !!(allProps[PROPS_KEYS.ADMIN_EMAIL] && 
                            allProps[PROPS_KEYS.DATABASE_SPREADSHEET_ID]),
        cacheAvailable: !!CacheService.getScriptCache()
      };
      
      // „Ç¢„É©„Éº„Éà„ÅÆÁîüÊàê
      if (monitoring.systemResources.propertiesCount > 50) {
        monitoring.alerts.push(`„Éó„É≠„Éë„ÉÜ„Ç£Êï∞„ÅåÂ§ö„ÅÑ„Åß„Åô (${  monitoring.systemResources.propertiesCount  })`);
      }
      
      if (!monitoring.systemResources.hasRequiredProps) {
        monitoring.alerts.push('ÂøÖÈ†à„Éó„É≠„Éë„ÉÜ„Ç£„Åå‰∏çË∂≥„Åß„Åô');
      }
    } catch (resourceError) {
      monitoring.alerts.push(`„É™„ÇΩ„Éº„ÇπÁõ£Ë¶ñ„Ç®„É©„Éº: ${  resourceError.message}`);
    }
    
    // 3. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊåáÊ®ô„ÅÆË®àÁÆó
    const endTime = Date.now();
    monitoring.metrics.executionTime = endTime - startTime;
    monitoring.metrics.responseTime = endTime - monitoring.metrics.responseTime;
    
    // „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Ç¢„É©„Éº„Éà
    if (monitoring.metrics.executionTime > 10000) { // 10Áßí‰ª•‰∏ä
      monitoring.alerts.push(`ÂÆüË°åÊôÇÈñì„ÅåÈï∑„ÅÑ„Åß„Åô (${  monitoring.metrics.executionTime  }ms)`);
    }
    
    // Á∑èÂêàÁä∂ÊÖã„ÅÆÂà§ÂÆö
    monitoring.overallStatus = monitoring.alerts.length === 0 ? 'healthy' : 
                              monitoring.alerts.length < 3 ? 'warning' : 'critical';
    
    return {
      success: true,
      monitoring,
      alertCount: monitoring.alerts.length,
      summary: `Áõ£Ë¶ñÁµêÊûú: ${monitoring.overallStatus} („Ç¢„É©„Éº„Éà: ${monitoring.alerts.length}‰ª∂)`
    };
  } catch (error) {
    console.error('performSystemMonitoring „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å
 * AppSetupPage.html „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã
 * 
 * @returns {Object} Êï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú
 */
function performDataIntegrityCheck() {
  try {
    const integrityResults = {
      timestamp: new Date().toISOString(),
      checks: [],
      issues: [],
      passed: 0,
      failed: 0
    };
    
    const userInfo = UserService.getCurrentUserInfo();
    if (!userInfo) {
      throw new Error('„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
    }
    
    // 1. „É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
    try {
      const config = ConfigService.getUserConfig(userInfo.userId);
      
      if (config) {
        // configJSON„ÅÆÊßãÈÄ†„ÉÅ„Çß„ÉÉ„ÇØ
        const requiredFields = ['spreadsheetId', 'setupStatus'];
        const missingFields = requiredFields.filter(field => !config[field]);
        
        if (missingFields.length === 0) {
          integrityResults.checks.push('Ë®≠ÂÆö„Éï„Ç£„Éº„É´„Éâ: OK');
          integrityResults.passed++;
        } else {
          integrityResults.checks.push('Ë®≠ÂÆö„Éï„Ç£„Éº„É´„Éâ: ‰∏çË∂≥');
          integrityResults.issues.push(`‰∏çË∂≥„Éï„Ç£„Éº„É´„Éâ: ${  missingFields.join(', ')}`);
          integrityResults.failed++;
        }
        
        // „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Ç¢„ÇØ„Çª„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        if (config.spreadsheetId) {
          try {
            const sheet = SpreadsheetApp.openById(config.spreadsheetId);
            const name = sheet.getName();
            integrityResults.checks.push('„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Ç¢„ÇØ„Çª„Çπ: OK');
            integrityResults.passed++;
          } catch (accessError) {
            integrityResults.checks.push('„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Ç¢„ÇØ„Çª„Çπ: „Ç®„É©„Éº');
            integrityResults.issues.push('„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì');
            integrityResults.failed++;
          }
        }
      } else {
        integrityResults.issues.push('„É¶„Éº„Ç∂„ÉºË®≠ÂÆö„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì');
        integrityResults.failed++;
      }
    } catch (userDataError) {
      integrityResults.issues.push(`„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº: ${  userDataError.message}`);
      integrityResults.failed++;
    }
    
    // 2. „Ç∑„Çπ„ÉÜ„É†„Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
    try {
      const props = PropertiesService.getScriptProperties();
      const requiredProps = [PROPS_KEYS.ADMIN_EMAIL, PROPS_KEYS.DATABASE_SPREADSHEET_ID];
      
      for (const prop of requiredProps) {
        const value = props.getProperty(prop);
        if (value) {
          integrityResults.checks.push(`${prop}: OK`);
          integrityResults.passed++;
        } else {
          integrityResults.checks.push(`${prop}: ‰∏çË∂≥`);
          integrityResults.issues.push(`ÂøÖÈ†à„Éó„É≠„Éë„ÉÜ„Ç£„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì: ${prop}`);
          integrityResults.failed++;
        }
      }
    } catch (systemDataError) {
      integrityResults.issues.push(`„Ç∑„Çπ„ÉÜ„É†„Éá„Éº„Çø„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº: ${  systemDataError.message}`);
      integrityResults.failed++;
    }
    
    // Á∑èÂêàÁµêÊûú
    const overallIntegrity = integrityResults.failed === 0 ? 'perfect' : 
                            integrityResults.failed < integrityResults.passed ? 'acceptable' : 'poor';
    
    return {
      success: true,
      integrity: overallIntegrity,
      results: integrityResults,
      summary: `Êï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ: ${integrityResults.passed}‰ª∂ÊàêÂäü, ${integrityResults.failed}‰ª∂Â§±Êïó`
    };
  } catch (error) {
    console.error('performDataIntegrityCheck „Ç®„É©„Éº:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

/**
 * Ë®∫Êñ≠ÁµêÊûú„Åã„ÇâÊé®Â•®‰∫ãÈ†Ö„ÇíÁîüÊàê
 * @private
 * @param {Object} diagnostics - Ë®∫Êñ≠ÁµêÊûú
 * @returns {Array} Êé®Â•®‰∫ãÈ†Ö„ÅÆÈÖçÂàó
 */
function generateRecommendations(diagnostics) {
  const recommendations = [];
  
  if (diagnostics.summary.failed > 0) {
    recommendations.push('Â§±Êïó„Åó„Åü„Çµ„Éº„Éì„Çπ„ÅÆÁ¢∫Ë™ç„Å®‰øÆÂæ©„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
  }
  
  if (!diagnostics.system.hasServiceAccount) {
    recommendations.push('Service AccountË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô');
  }
  
  if (!diagnostics.system.hasDatabaseId) {
    recommendations.push('„Éá„Éº„Çø„Éô„Éº„Çπ„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàID„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô');
  }
  
  if (!diagnostics.system.hasAdminEmail) {
    recommendations.push('ÁÆ°ÁêÜËÄÖ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô');
  }
  
  if (recommendations.length === 0) {
    recommendations.push('„Ç∑„Çπ„ÉÜ„É†„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô');
  }
  
  return recommendations;
}
